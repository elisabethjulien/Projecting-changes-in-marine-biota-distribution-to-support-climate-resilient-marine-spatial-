install.packages("dplyr")
library(dplyr)

#import all dowloaded csv files, tab separate them, and use double invereted commas as quote
file_paths <- list.files(path = "gbifs", pattern = "*.csv", full.names = TRUE)
data_list <- lapply(file_paths, read_delim, delim = "\t", quote = "\\\"", escape_double = FALSE, trim_ws = TRUE)

#keep only the species name, and coordinate columns
selected_data_list <- lapply(data_list[1:71], function(df) df[c("species", "decimalLatitude", "decimalLongitude")])

# make sure latitude and longitude are numerical  in all data frames
for (i in 1:length(selected_data_list)) {
  selected_data_list[[i]]$decimalLatitude <- as.double(selected_data_list[[i]]$decimalLatitude)
}
for (i in 1:length(selected_data_list)) {
  selected_data_list[[i]]$decimalLongitude <- as.double(selected_data_list[[i]]$decimalLongitude)
}

# Merge the data frames vertically using bind_rows
merged_data <- bind_rows(selected_data_list)

# Now, merged_data is a single data frame with one set of column names

#get rid of na values and duplicates
data_no_na <- merged_data[complete.cases(merged_data$decimalLatitude, merged_data$decimalLongitude), ]
unique_merged_datana <- unique(data_no_na)

#  add order for inconsistent turtle data
unique_merged_datana <- unique_merged_datana %>%
  mutate(order = case_when(
    species == "Caretta caretta" ~ "Testudines",
    species == "Dermochelys coriacea" ~ "Testudines",
    TRUE ~ order  # Keep the original value if none of the conditions match
  ))

#just wanted to see how many species/order/family
unique_values <- unique(unique_merged_datana$species)
print(unique_values)

#to see which species name has too few entries
# Group by the 'name' column and count the number of rows for each name
row_counts <-unique_merged_datana %>%
  group_by(species) %>%
  summarize(row_count = n())
print(row_counts)
view(row_counts)

#centrosymnus has insufficient values, there are some na species
# Remove rows where species is NA or "Centroscymnus coelolepis" 
clean_data <- unique_merged_datana %>%
  filter(!is.na(species) & species != "Centroscymnus coelolepis")
#look at data 
#number of speceis, etc
unique_values <- unique(clean_data$genus)

#adding msp uses and water column depth 

cleandepthdata <- clean_data %>%
  mutate(water_column_use = case_when(
    species %in% c("Centrophorus squamosus","Phyllariopsis brevipes", "Cymodocea nodosa", "Hippocampus guttulatus","Lithothamnion corallioides","Desmophyllum pertusum", "Hippocampus hippocampus","Zeus faber","Mytilus galloprovincialis","Octopus vulgaris","Laminaria ochroleuca","Loligo vulgaris","Raja clavata","Laminaria hyperborea","Dipturus batis","Hoplostethus atlanticus","Saccharina latissima","Nucella lapillus","Undaria pinnatifida","Lophius piscatorius"," Phyllariopsis brevipes","Squatina squatina","Phymatolithon calcareum","Palaemon serratus","Pagellus bogaraveo","Saccorhiza polyschides","Raja montagui","Ostrea edulis" ,"Rostroraja alba" ,"Scophthalmus maximus" ,"Solea solea" ,"Squalus acanthias" ,"Zostera marina" ) ~ "demersal", 
    species %in% c( "Xiphias gladius", "Tursiops truncatus", "Trachurus trachurus", "Thunnus thynnus", "Thunnus obesus", "Ziphius cavirostris", "Thunnus albacares", "Thunnus alalunga", "Stenella frontalis", "Stenella coeruleoalba", "Sphyraena barracuda", "Scomber scombrus", "Sardina pilchardus", "Pseudorca crassidens", "Pollicipes pollicipes", "Lamna nasus", "Katsuwonus pelamis", "Merluccius merluccius", "Balaenoptera physalus", "Orcinus orca", "Grampus griseus", "Makaira nigricans", "Megaptera novaeangliae", "Physeter macrocephalus", "Dermochelys coriacea", "Engraulis encrasicolus", "Caretta caretta", "Balaenoptera musculus", "Globicephala macrorhynchus", "Delphinus delphis", "Eubalaena glacialis", "Coryphaena hippurus", "Cetorhinus maximus", "Decapterus punctatus", "Acanthocybium solandri", "Dicentrarchus labrax", "Balaenoptera acutorostrata", "Balaenoptera borealis") ~ "pelagic",
    TRUE ~ "DefaultValue"  # Optional: Default value for other cases
  ))

#check for water column use
unique_values <- unique(cleandepthdata$water_column_use)

# Print or inspect the list of unique values
print(unique_values)

row_counts <-cleandepthdata %>%
  group_by(water_column_use) %>%
  summarize(row_count = n())
print(row_counts)

# View rows where the "water_colum_use" column has the value "DefaultValue" to check if i forgoitr a species
filtered_data <- cleandepthdata %>%
  filter(water_column_use == "DefaultValue")
print(filtered_data)

#make datasets specifically for each msp use 
#tourism
tourism_data <- cleandepthdata %>%
  filter(species %in% c("Balaenoptera acutorostrata", "Balaenoptera borealis", "Balaenoptera musculus", "Balaenoptera physalus", "Delphinus delphis", "Globicephala macrorhynchus", "Grampus griseus", "Megaptera novaeangliae", "Orcinus orca", "Physeter macrocephalus", "Pseudorca crassidens", "Stenella coeruleoalba", "Stenella frontalis", "Tursiops truncatus", "Ziphius cavirostris", "Xiphias gladius", "Coryphaena hippurus", "Makaira nigricans", "Kajikia albida", "Katsuwonus pelamis", "Thunnus albacares", "Thunnus thynnus", "Thunnus alalunga", "Sphyraena barracuda", "Isurus oxyrinchus", "Acanthocybium solandri"))

#check for species in tourism
unique_values <- unique(tourism_data$species)

# Print or inspect the list of unique values
print(unique_values)
> print(unique_values)
 [1] "Acanthocybium solandri"     "Balaenoptera acutorostrata"
 [3] "Thunnus alalunga"           "Thunnus albacares"         
 [5] "Sphyraena barracuda"        "Balaenoptera borealis"     
 [7] "Coryphaena hippurus"        "Delphinus delphis"         
 [9] "Globicephala macrorhynchus" "Grampus griseus"           
[11] "Katsuwonus pelamis"         "Makaira nigricans"         
[13] "Megaptera novaeangliae"     "Balaenoptera musculus"     
[15] "Orcinus orca"               "Balaenoptera physalus"     
[17] "Physeter macrocephalus"     "Pseudorca crassidens"      
[19] "Stenella coeruleoalba"      "Stenella frontalis"        
[21] "Thunnus thynnus"            "Tursiops truncatus"        
[23] "Xiphias gladius"            "Ziphius cavirostris"

#map tourism species
mpo <- map_data("world")
tourismmap<- ggplot() +
  geom_polygon(data = mpo, aes(x = long, y = lat, group = group), fill = "grey") +
  theme_void()+
  geom_point(data = tourism_data, aes(x = decimalLongitude, y = decimalLatitude, color = species), size = 0.01) +
  theme_minimal() +
  scale_color_viridis_d() +
  guides(size = 'none') +
  coord_map()
plot(tourismmap)

#conservation
conservation_data <- cleandepthdata %>%
  filter(species %in% c("Ostrea edulis","Dermochelys coriacea","Nucella lapillus","Caretta caretta","Raja montagui","Raja clavata","Lophelia pertusa","Centrophorus granulosus","Cetorhinus maximus","Squatina squatina","Rostroraja alba","Eubalena glacialis","Balaenoptera musculus","Thunnus thynnus","Hippocampus guttulatus","Centrophorus squamosus","Hoplostethus atlanticus","Cymodocea nodosa","Squalus acanthias","Lamna nasus","Hippocampus hippocampus","Dipturus batis","Centroscymnus coelolepis","Undaria pinnatifda","Zostera marina","Zostera nolti","Lithothamnion corallioides","Phymatolithon calcareum", "Saccorhiza polyschides", "Saccharina latissima", "Laminaria hyperborea", "Laminaria ochroleucai"))

#check for species in cons
unique_values <- unique(conservation_data$species)
[1] "Caretta caretta"            "Centrophorus squamosus"    
 [3] "Cetorhinus maximus"         "Cymodocea nodosa"          
 [5] "Dermochelys coriacea"       "Dipturus batis"            
 [7] "Hippocampus hippocampus"    "Hippocampus guttulatus"    
 [9] "Hoplostethus atlanticus"    "Laminaria hyperborea"      
[11] "Lamna nasus"                "Lithothamnion corallioides"
[13] "Balaenoptera musculus"      "Nucella lapillus"          
[15] "Ostrea edulis"              "Phymatolithon calcareum"   
[17] "Raja clavata"               "Raja montagui"             
[19] "Rostroraja alba"            "Saccharina latissima"      
[21] "Saccorhiza polyschides"     "Squalus acanthias"         
[23] "Squatina squatina"          "Thunnus thynnus"           
[25] "Zostera marina"


# Print or inspect the list of unique values
print(unique_values)
#map tourism species
mpo <- map_data("world")
consmap<- ggplot() +
  geom_polygon(data = mpo, aes(x = long, y = lat, group = group), fill = "grey") +
  theme_void()+
  geom_point(data = conservation_data, aes(x = decimalLongitude, y = decimalLatitude, color = species), size = 0.01) +
  theme_minimal() +
  scale_color_viridis_d() +
  guides(size = 'none') +
  coord_map()
plot(consmap)

#fishing
fishing_data <- cleandepthdata %>%
  filter(species %in% c("Octopus vulgaris","Loligo vulgaris","Sepia officinalis","Ruditapes decussatus","Palaemon serratus","Lophius piscatorius","Sardina pilchardus","Dicentrarchus labrax","Raja clavata","Dipturus batis","Aphanopus carbo","Merluccius merluccius","Pagellus bogaraveo","Solea solea","Sparus aurata","Pollicipes pollicipes","Zeus faber","Scomber scombrus","Decapterus punctatus","Trachurus trachurus","Thunnus albacares","Engraulis encrasicolus","Thunnus alalunga","Thunnus thynnus","Katsuwonus pelamis","Thunnus obesus"))

#check for species in fish
unique_values <- unique(fishing_data$species)

# Print or inspect the list of unique values
print(unique_values)

> print(unique_values)
 [1] "Thunnus alalunga"       "Thunnus albacares"     
 [3] "Decapterus punctatus"   "Dipturus batis"        
 [5] "Engraulis encrasicolus" "Katsuwonus pelamis"    
 [7] "Dicentrarchus labrax"   "Loligo vulgaris"       
 [9] "Lophius piscatorius"    "Merluccius merluccius" 
[11] "Thunnus obesus"         "Octopus vulgaris"      
[13] "Pagellus bogaraveo"     "Palaemon serratus"     
[15] "Pollicipes pollicipes"  "Raja clavata"          
[17] "Sardina pilchardus"     "Scomber scombrus"      
[19] "Solea solea"            "Thunnus thynnus"       
[21] "Trachurus trachurus"    "Zeus faber"  

#map fish species
fishmap<- ggplot() +
  geom_polygon(data = mpo, aes(x = long, y = lat, group = group), fill = "grey") +
  theme_void()+
  geom_point(data = fishing_data, aes(x = decimalLongitude, y = decimalLatitude, color = species), size = 0.03) +
  theme_minimal() +
  scale_color_viridis_d() +
  guides(size = 'none') +
  coord_map()
plot(fishmap)

#aquaculture
aquaculture_data <- cleandepthdata %>%
  filter(species %in% c("Dicentrarchus labrax","Sparus aurata","Scophthalmus maximus","Mytilus galloprovincialis","Ostrea edulis","Ruditapes decussatus")) 

#check for species in aquaculture_data
unique_values <- unique(aquaculture_data$species)

# Print or inspect the list of unique values
print(unique_values)
[1] "Dicentrarchus labrax"      "Mytilus galloprovincialis"
[3] "Ostrea edulis"             "Scophthalmus maximus"   
#map aquaculture species
aquaculturemap<- ggplot() +
  geom_polygon(data = mpo, aes(x = long, y = lat, group = group), fill = "grey") +
  theme_void()+
  geom_point(data = aquaculture_data, aes(x = decimalLongitude, y = decimalLatitude, color = species), size = 0.03) +
  theme_minimal() +
  scale_color_viridis_d() +
  guides(size = 'none') +
  coord_map()
plot(aquaculturemap)

# make a raster stack of these env variuables
library(raster)
library(sdm)
installAll()
devtools::install_github('babaknaimi/sdm')
library(sdm)

lst <- list.files(path="~/lili master/environmental_variables",pattern='.tif$',full.names = T) # list the name of files in the specified path, match the pattern (means all files with a name ending to asc). We asked to generate full names (i.e., names with the path)
lst
print(raster_names)

dobenmeanltmin<-raster(lst[1])
dobenmeanmean<-raster(lst[2])
dobenminltmin<-raster(lst[3])
dosurfltmax<-raster(lst[4])
dosurfltmin<-raster(lst[5])
dosurfltmean<-raster(lst[6])
nibenmeanltmin<-raster(lst[7])
nibenmeanmean<-raster(lst[8])
nibenminltmin<-raster(lst[9])
nisurfmean<-raster(lst[10])
tempbenmeanltmax<-raster(lst[11])
tempbenmeanltmin<-raster(lst[12])
tempbenminltmax<-raster(lst[13])
tempbenminltmin<-raster(lst[14])
tempsurfltmax<-raster(lst[15])
tempsurfltmin<-raster(lst[16])
tempsurfltmean<-raster(lst[17])
phbenmeanltmax<-raster(lst[18])
phbenmeanltmax<-raster(lst[19])
phbenmeanmean<-raster(lst[20])
phsurfltmax<-raster(lst[21])
phsurfltmin<-raster(lst[22])
phsurfmean<-raster(lst[23])
phybenmeanmean<-raster(lst[24])
physurfltmax<-raster(lst[25])
physurfltmin<-raster(lst[26])
physurfmean<-raster(lst[27])
salbenmeanltmin<-raster(lst[28])
salbenmeanmean<-raster(lst[29])
salbenminltmin<-raster(lst[30])
salsurfltmax<-raster(lst[31])
salsurfltmin<-raster(lst[32])
salsurfmean<-raster(lst[33])
salbenminltmin<-raster(lst[34])
iceltmax<-raster(lst[35])
iceltmin<-raster(lst[36])
icemean<-raster(lst[37])
swsbenmean<-raster(lst[38])
rugbenmean<-raster(lst[39])
tpibenmean<-raster(lst[40])
tphybenmeanltmin<-raster(lst[41])

plot(iceltmax)

#put in same extant - you can try if it works with the environmental  variables

dobenmeanmeanf<- resample(dobenmeanmean, dobenmeanltmin,method='ngb')
dobenminltminf<- resample(dobenminltmin, dobenmeanltmin,method='ngb')
dosurfltmaxf<- resample(dosurfltmax, dobenmeanltmin,method='ngb')
dosurfltminf<- resample(dosurfltmin, dobenmeanltmin,method='ngb')
dosurfltmeanf<- resample(dosurfltmean, dobenmeanltmin,method='ngb')
nibenmeanltminf<- resample(nibenmeanltmin, dobenmeanltmin,method='ngb')
nibenmeanmeanf<- resample(nibenmeanmean, dobenmeanltmin,method='ngb')
nibenminltminf<- resample(nibenminltmin, dobenmeanltmin,method='ngb')
nisurfmeanf<- resample(nisurfmean, dobenmeanltmin,method='ngb')
tempbenmeanltmaxf<- resample(tempbenmeanltmax, dobenmeanltmin,method='ngb')
tempbenmeanltminf<- resample(tempbenmeanltmin, dobenmeanltmin,method='ngb')
tempbenminltmaxf<- resample(tempbenminltmax, dobenmeanltmin,method='ngb')
tempbenminltminf<- resample(tempbenminltmin, dobenmeanltmin,method='ngb')
tempsurfltmaxf<- resample(tempsurfltmax, dobenmeanltmin,method='ngb')
tempsurfltminf<- resample(tempsurfltmin, dobenmeanltmin,method='ngb')
tempsurfltmeanf<- resample(tempsurfltmean, dobenmeanltmin,method='ngb')
phbenmeanltmaxf<- resample(phbenmeanltmax, dobenmeanltmin,method='ngb')
phbenmeanltmaxf<- resample(phbenmeanltmax, dobenmeanltmin,method='ngb')
phbenmeanmeanf<- resample(phbenmeanmean, dobenmeanltmin,method='ngb')
phsurfltmaxf<- resample(phsurfltmax, dobenmeanltmin,method='ngb')
phsurfltminf<- resample(phsurfltmin, dobenmeanltmin,method='ngb')
phsurfmeanf<- resample(phsurfmean, dobenmeanltmin,method='ngb')
phybenmeanmeanf<- resample(phybenmeanmean, dobenmeanltmin,method='ngb')
physurfltmaxf<- resample(physurfltmax, dobenmeanltmin,method='ngb')
physurfltminf<- resample(physurfltmin, dobenmeanltmin,method='ngb')
physurfmeanf<- resample(physurfmean, dobenmeanltmin,method='ngb')
salbenmeanltminf<- resample(salbenmeanltmin, dobenmeanltmin,method='ngb')
salbenmeanmeanf<- resample(salbenmeanmean, dobenmeanltmin,method='ngb')
salbenminltminf<- resample(salbenminltmin, dobenmeanltmin,method='ngb')
salsurfltmaxf<- resample(salsurfltmax, dobenmeanltmin,method='ngb')
salsurfltminf<- resample(salsurfltmin, dobenmeanltmin,method='ngb')
salsurfmeanf<- resample(salsurfmean, dobenmeanltmin,method='ngb')
salbenminltminf<- resample(salbenminltmin, dobenmeanltmin,method='ngb')
iceltmaxf<- resample(iceltmax, dobenmeanltmin,method='ngb')
iceltminf<- resample(iceltmin, dobenmeanltmin,method='ngb')
icemeanf<- resample(icemean, dobenmeanltmin,method='ngb')
swsbenmeanf<- resample(swsbenmean, dobenmeanltmin,method='ngb')
rugbenmeanf<- resample(rugbenmean, dobenmeanltmin,method='ngb')
tphybenmeanltminf<- resample(tphybenmeanltmin, dobenmeanltmin,method='ngb')

plot(tphybenmeanltminf)
#create stack with all the variables
preds <- stack(dobenmeanmeanf,
               dobenmeanltmin,
               dobenminltminf,
               dosurfltmaxf,
               dosurfltminf,
               dosurfltmeanf,
               nibenmeanltminf,
               nibenmeanmeanf,
               nibenminltminf,
               nisurfmeanf,
               tempbenmeanltmaxf,
               tempbenmeanltminf,
               tempbenminltmaxf,
               tempbenminltminf,
               tempsurfltmaxf,
               tempsurfltminf,
               tempsurfltmeanf,
               phbenmeanltmaxf,
               phbenmeanltmaxf,
               phbenmeanmeanf,
               phsurfltmaxf,
               phsurfltminf,
               phsurfmeanf,
               phybenmeanmeanf,
               physurfltmaxf,
               physurfltminf,
               physurfmeanf,
               salbenmeanltminf,
               salbenmeanmeanf,
               salbenminltminf,
               salsurfltmaxf,
               salsurfltminf,
               salsurfmeanf,
               salbenminltminf,
               iceltmaxf,
               iceltminf,
               icemeanf,
               swsbenmeanf,
               rugbenmeanf,
               tpibenmeanf,
               tphybenmeanltminf)

preds <- writeRaster(preds,'predictors24nov.tif')

sp_data$occurrence <- 1

class(sp_data) # it is a SpatialPointsDataFrame
install.packages("rJava")
library(rJava)

head(sp_data)
sp_data$OBJECTID<-NULL
sp_data <- spTransform(sp_data, projection(dobenmeanltmin)) 
plot(sp_data)

#---- remove collinear variables
library(usdm)
spx <- extract(preds, sp_data)

head(spx)
class(spx)
spx <- data.frame(spx)

v <- vifstep(spx)

# Assuming 'spx' is your data frame with predictor variables
cor_matrix <- cor(spx)

install.packages("car")
library(car)
vif_values <- car::vif(lm(sp_data$occurrence ~ ., data = spx))  
spx_clean <- spx[, !duplicated(t(spx))]  # Remove duplicated columns

v <- vifstep(spx_clean)
bio <- exclude(preds, v)
class(bio)
dim(bio)

i<-cbind(sp_data@data,spx)
str(i)

write.table(i, file = "matrix.txt", sep = ",")
i<-read.table("matrix.txt",sep=",",header=TRUE)

#correlation matrix
library("PerformanceAnalytics")
numeric_i <- i[sapply(i, is.numeric)]
chart.Correlation(numeric_i, histogram = TRUE, pch = 19)













